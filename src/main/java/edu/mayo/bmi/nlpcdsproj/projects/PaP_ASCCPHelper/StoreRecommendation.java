/*******************************************************************************
 *  Research (MFMER). All rights reserved. MAYO, MAYO CLINIC, and the
 *  triple-shield Mayo logo are trademarks and service marks of MFMER.
 *
 *  Except as contained in the copyright notice above, or as used to identify
 *  MFMER as the author of this software, the trade names, trademarks, service
 *  marks, or product names of the copyright holder shall not be used in
 *  advertising, promotion or otherwise in connection with this software without
 *  prior written authorization of the copyright holder.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *******************************************************************************/
 
package edu.mayo.bmi.nlpcdsproj.projects.PaP_ASCCPHelper;



import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.joda.time.DateTime;
import org.joda.time.Months;
import org.joda.time.Years;
import org.joda.time.format.DateTimeFormat;

import org.ohnlp.cidb.core.Session;
import org.ohnlp.cidb.exception.CIDBException;
import org.ohnlp.cidb.exception.ConceptNotFoundException;
import org.ohnlp.cidb.io.Sql;
import org.ohnlp.cidb.misc.Utils;
import org.ohnlp.flowds.engine.DataFetchException;
import org.ohnlp.flowds.engine.Recommend;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Application class to store care recommendation generated by CDSS in a file or Database 
 * @author Kavishwar B. Wagholikar and K.E. Ravikumar
 *
 */


public class StoreRecommendation {
	static Logger logger=LoggerFactory.getLogger(StoreRecommendation.class);
	static Sql sqlO=null;
	static Sql sql1=null;

	static public void store(Recommend r,Session session) throws 
			DataFetchException, SQLException, CIDBException, ParseException, ConceptNotFoundException {

	}

	public static String returnMonth(String mon) {

		String month = "" ;

		if (mon.equals("Jan")) {
			month = "01" ;
		} else if (mon.equals("Feb")) {
			month = "02" ;
		} else if (mon.equals("Mar")) {
			month = "03" ;
		} else if (mon.equals("Apr")) {
			month = "04" ;
		} else if (mon.equals("May")) {
			month = "05" ;
		} else if (mon.equals("Jun")) {
			month = "06" ;
		} else if (mon.equals("Jul")) {
			month = "07" ;
		} else if (mon.equals("Aug")) {
			month = "08" ;
		} else if (mon.equals("Sep")) {
			month = "09" ;
		} else if (mon.equals("Oct")) {
			month = "10" ;
		} else if (mon.equals("Nov")) {
			month = "11" ;
		} else if (mon.equals("Dec")) {
			month = "12" ;
		}
		return month;
	}

	public static String returnMonthStr(String mon) {

		String month = "" ;

		if (mon.equals("01")) {
			month = "Jan" ;
		} else if (mon.equals("02")) {
			month = "Feb" ;
		} else if (mon.equals("03")) {
			month = "Mar" ;
		} else if (mon.equals("04")) {
			month = "Apr" ;
		} else if (mon.equals("05")) {
			month = "May" ;
		} else if (mon.equals("06")) {
			month = "Jun" ;
		} else if (mon.equals("07")) {
			month = "Jul" ;
		} else if (mon.equals("08")) {
			month = "Aug" ;
		} else if (mon.equals("09")) {
			month = "Sep" ;
		} else if (mon.equals("10")) {
			month = "Oct" ;
		} else if (mon.equals("11")) {
			month = "Nov" ;
		} else if (mon.equals("12")) {
			month = "Dec" ;
		}
		return month;
	}

	@SuppressWarnings("unused")
	public static void store(Session s,Recommend r) throws  CIDBException, ParseException{
		String rname=r.getNodePath().split("\\s+")[r.getNodePath().split("\\s+").length-1];
		SimpleDateFormat format = new SimpleDateFormat("dd/MMM/yyyy");
		SimpleDateFormat form = new SimpleDateFormat("yyyy-mm-dd");
		String dueStatus = "NIL" ;
		String cTime = "" ;

		String colposcopyLastTime = "Not applicable" ;
		String colpStatus = "Not Applicable" ;

		Pattern p = Pattern.compile("([0-9]{4})\\-([0-9]{2})\\-([0-9]{2})") ;
		Pattern p1 = Pattern.compile("([0-9]{2})\\-([A-z]{3})\\-([0-9]{4})") ;

		DateTime currDate = new DateTime() ;

		String lTime = r.getGuideline() ;

		try {

			if ((!(r.getNextTestDateString().isEmpty()) || r.getNextTestDateString() != null)) {
				cTime = r.getNextTestDateString() ;
				//System.out.println("Last Test Time1="+lTime+":"+cTime) ;
			} else {				
				cTime = lTime ;
			}
		} catch (NullPointerException npe) {
			// TODO Auto-generated catch block
			cTime = currDate.toString() ;
		} catch (Exception e) {
			e.printStackTrace() ;
		}
		String brief = "" ;
		System.out.println("RNAME="+rname+":"+lTime+":"+r.getGuideline()) ;

		if (rname.equals("R2")) {
			cTime = lTime ;
			System.out.println("Last Test Time1="+cTime) ;
		}

		if (rname.equals("R3")) {
			cTime = lTime ;
			System.out.println("Last Test Time1a="+cTime) ;
		}
		
		if (rname.equals("R5")) {
			cTime = lTime ;
			System.out.println("Last Test Time1a="+cTime) ;
		}

		if (rname.equals("R66")) {
			cTime = lTime ;
			System.out.println("Last Test Time1c="+cTime) ;
		}
		
		String dTime = "" ;

		Matcher m1 = p1.matcher(cTime);

		if (m1.find()) {
			String year = "" ;
			year = m1.group(3) ;
			String mon = "" ;
			String month = "" ;
			String day = m1.group(1) ;
			month=returnMonth (m1.group(2)) ;
			cTime = year + "-" + month + "-" + day;
		}
		 
		System.out.println("CTIME="+cTime);

		Matcher m = p.matcher(cTime);

		if (m.find()) {
			System.out.println("Last Test Time2="+cTime) ;
			System.out.println("HERE="+m.group(2)) ;
			String year = "" ;
			year = m.group(1) ;

			int YEAR = Integer.parseInt(year) ;

			String month = "" ;

			month=returnMonthStr(m.group(2)) ;

			if (rname.equals("R5") || rname.equals("R3")) {
				YEAR = YEAR + 3 ;
				dTime = YEAR+"-"+month+"-"+ m.group(3) ;
			} 

			if (rname.equals("R2") || rname.equals("R66") ) {
				YEAR = YEAR + 1 ;
				System.out.println("Last Test Time3="+cTime+":"+YEAR) ;
				dTime = YEAR+"-"+month+"-"+ m.group(3) ;
			} 

			/**
			 * float colpYears = 0 ;
			 * String colpYear = "" ;
			 * String colpMonth = "" ;
			 * String colpDay = "" ;
			 */		

			if (rname.equals("R1") || rname.equals("R6") || rname.equals("R6") || rname.equals("R61")
					|| rname.equals("R7") || rname.equals("R8") || rname.equals("R11") || rname.equals("R13")
					|| rname.equals("R15") || rname.equals("R17") || rname.equals("R175") || rname.equals("R18")
					|| rname.equals("R19") || rname.equals("R31") || rname.equals("R32") || rname.equals("R34")
					|| rname.equals("R65")) {
				
				dTime = "Clinician to determine next test time based on colposcopy clinic recommendations." ;
			} 

			else if (rname.equals("R38")) {				
				dTime = "Clinician to determine next test time based on recommendation" ;
				
			}

			else {
				dTime = YEAR+"-"+returnMonth(month)+"-"+ m.group(3) ;
			}
			
			System.out.println("Last Test Time4="+dTime) ;

		} 


		if (rname.equals("R2") || rname.equals("R3") 
				|| rname.equals("R66") || rname.equals("R14") || rname.equals("R42")) {
			brief = r.getBrief() + " on "+ dTime.replaceAll("/", "-") ;
			System.out.println("Brief="+brief) ;
		} else if (!rname.equals("R1") || !rname.equals("R6") || !rname.equals("R61") || !rname.equals("R65")
				|| !rname.equals("R7") || !rname.equals("R8") || !rname.equals("R11") || !rname.equals("R13")
				|| !rname.equals("R15") || !rname.equals("R17") || !rname.equals("R175") || !rname.equals("R18")
				|| !rname.equals("R19") || !rname.equals("R31") || !rname.equals("R32") || !rname.equals("R34")) {			
			brief = r.getBrief() ;
		}

		if (rname.equals("R66")) {
			rname = "R35" ;
		}

		Date dueDate = null ;
		System.out.println("Due Time After R38="+dTime) ;
		
		if (!(rname.equals("R38") || rname.equals("R1") || rname.equals("R6") || rname.equals("R61") || rname.equals("R65")
				|| rname.equals("R7") || rname.equals("R8") || rname.equals("R11") || rname.equals("R13")
				|| rname.equals("R15") || rname.equals("R17") || rname.equals("R175") || rname.equals("R18")
				|| rname.equals("R19") || rname.equals("R31") || rname.equals("R32") || rname.equals("R34"))) {

			Matcher fMat = p.matcher(dTime) ;
	
			String fTime = "" ;
	
			if (fMat.find()) {
				fTime = fMat.group(3)+'/'+returnMonthStr(fMat.group(2))+'/'+fMat.group(1) ;
			}
	
			try { 
				if (!fTime.equals("null-null-null null:null:null") || fTime != null || !fTime.isEmpty()) {
					dueDate = format.parse(fTime) ;
				} else {
					dueDate = format.parse(fTime.replaceAll("-", "/")) ;
				}
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	
			DateTime dueD = new DateTime(dueDate);
	
			System.out.println("Due Date COMP="+dueDate+':'+dueD) ;	
			System.out.println("Current Date="+currDate) ;
	
			if (dueD.isBeforeNow()) {
				dueStatus = "Patient overdue for screening" ;
			} else if (Months.monthsBetween(currDate, dueD).getMonths() <= 3) {
				System.out.println("Months In Between "+currDate+" and "+ dueD +"="+Months.monthsBetween(currDate, dueD).getMonths());
				dueStatus = "Patient due for next screening in next three months" ;
			} else {
				dueStatus = "Patient due for next screening after three months" ;
			}
	
			if (rname.equals("R60")) {
				dueStatus = "No screening necessary" ;
			}
			
		} else {
				dueStatus = "Refer to recommendation/explanation" ;
		}

		String decisionStatus = "NIL" ;
		/**
		 * NORMAL END POINTS : R25, R26, R28, R29, R39, R41, R46, R47, R48, R49
		 */

		if (rname.equals("R4") || rname.equals("R12") || rname.equals("R24") 
				|| rname.equals("R25") || rname.equals("R26")  || rname.equals("R28")
				|| rname.equals("R29") || rname.equals("R39") || rname.equals("R41")
				|| rname.equals("R45") || rname.equals("R46")  || rname.equals("R47")  
				|| rname.equals("R49") || rname.equals("R48")) {
			decisionStatus = "Normal" ;
		} else if (rname.equals("R60")) {
			decisionStatus = "No screening" ;
		} else if (rname.startsWith("R")) {
			decisionStatus = "Abnormal" ;
		} else {
			decisionStatus = "ERROR" ;
			dTime = "Not applicable" ;
			dueStatus = "Not Applicable" ;
		}
		
		String sqlIndex = "" ;
		String processingStatus ="" ;
		
		if (rname.equals("R60")) {
			processingStatus = "Never" ;
		} else if (rname.equals("ERROR")) {
			processingStatus = "ERROR" ;
		} else if (rname.startsWith("R")) {
			processingStatus = "Yes" ;
		}
		
		SimpleDateFormat dtFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = new Date();
		
		
		System.out.println("Processing Status="+processingStatus+":"+date+":"+dtFormat.format(date)) ;
		
			
		try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("Output/out.txt", true)))) {
			out.println("mcn:"+r.getMcn()+"\tTime:"+r.getDecisionTimeString()+"\tRname:"+rname+"\tBrief:"+brief+"\tExplanation:"+r.getExplaination()+"\tDecisionPath:"+r.getDecisionPath());
			out.close();
		}catch (IOException e) {
			//exception handling left as an exercise for the reader
		}
		
		logger.info("saving:\nmcn:"+r.getMcn()+"\nBrief:"+brief+"\nExplanation:"+r.getExplaination()
		+"\nRname:"+rname+"\nnexttesttime:"+dTime+"\nLastPapDate:"+r.getGuideline()
		+"\nDecisionStatus:"+decisionStatus+"\nDueStatus:"+dueStatus+"\n"+r.getDecisionPath()
		+"\nLastColposcopy Time:"+colposcopyLastTime);
		
	}
	

}
